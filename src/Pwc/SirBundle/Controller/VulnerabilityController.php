<?php

namespace Pwc\SirBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Pwc\SirBundle\Entity\Vulnerability;
use Pwc\SirBundle\Entity\VulnRef;

use Pwc\SirBundle\Form\VulnerabilityType;

/**
 * Vulnerability controller.
 *
 * @Route("/vulnerability")
 */
class VulnerabilityController extends Controller
{
    /**
     * Lists all Vulnerability entities.
     *
     * @Route("/", name="vulnerability")
     * @Template()
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $pc = $this->get('pagination_checker');
        $pc->addAllowedFieldName('name');

        $pc->setPaginatedSubject($pc->isSortable() ? $em->getRepository('PwcSirBundle:Vulnerability')->findAllSorted($pc->getSortField(), $pc->getSortDirection()) : $em->getRepository('PwcSirBundle:Vulnerability')->findAll());

        $deleteForm = $this->createDeleteForm('');

        return array(
            'subtitle'   => $this->get('translator')->trans('form.general.subtitle.management', array('%type%' => 'Vulnerability')),
            'pagination' => $pc->getPagination(),
            'delete_form' => $deleteForm->createView()
        );
    }

    /**
     * Finds and displays a Vulnerability entity.
     *
     * @Route("/{slug}/show", name="vulnerability_show")
     * @Template()
     */
    public function showAction($slug)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlugWithJoins($slug);
        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

        $deleteForm = $this->createDeleteForm($entity->getSlug());

        $entity->setLanguages($em->getRepository('PwcSirBundle:Language')->findAll());

        return array(
            'entity'       => $entity,
            'delete_form'  => $deleteForm->createView(),
            'subtitle'    => $this->get('translator')->trans('form.general.subtitle.details', array('%type%' => 'Vulnerability'))
        );
    }

    /**
     * Finds and displays a Vulnerability entity as a sidebar widget.
     *
     * @Route("/{slug}/widget", name="vulnerability_widget")
     * @Template("PwcSirBundle:Vulnerability:_widget.html.twig")
     */
    public function widgetAction($slug)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlugWithJoins($slug);
        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

        $deleteForm = $this->createDeleteForm($entity->getId());

        return array(
            'entity'       => $entity,
            'delete_form'  => $deleteForm->createView(),
        );
    }

    /**
     * Displays a form to create a new Vulnerability entity.
     *
     * @Route("/new", name="vulnerability_new")
     * @Template()
     */
    public function newAction()
    {
        $entity = new Vulnerability();
        $form   = $this->createForm(new VulnerabilityType(), $entity);

        return array(
            'entity'      => $entity,
            'form'        => $form->createView(),
            'subtitle'    => $this->get('translator')->trans('form.general.subtitle.new', array('%type%' => 'Vulnerability'))
        );
    }

    /**
     * Creates a new Vulnerability entity.
     *
     * @Route("/create", name="vulnerability_create")
     * @Method("POST")
     * @Template("PwcSirBundle:Vulnerability:new.html.twig")
     */
    public function createAction(Request $request)
    {
        $entity  = new Vulnerability();
        $form = $this->createForm(new VulnerabilityType(), $entity);
        $form->bind($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($entity);

            $em->flush();

            return $this->redirect($this->generateUrl('vulnerability_show', array('slug' => $entity->getSlug(), 'languageSlug' => 'en')));
        }

        $this->get('session')->getFlashBag()->add('warning', 'form.general.flash.save_unable');

        return array(
            'entity'      => $entity,
            'form'        => $form->createView(),
            'subtitle'    => $this->get('translator')->trans('form.general.subtitle.new', array('%type%' => 'Vulnerability'))
        );
    }

    /**
     * Displays the version history of a vulnerability.
     *
     * @Route("/{slug}/history", name="vulnerability_history")
     * @Template()
     */
    public function historyAction($slug)
    {
        $em = $this->get('doctrine')->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlug($slug);
        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

        $modContextProvider = $this->get('mod_context_provider');
        $modContextProvider->setCurrentVersions($entity);

        return array(
            'subtitle'           => $this->get('translator')->trans('form.general.subtitle.history', array('%type%' => 'Vulnerability')),
            'entity'             => $entity,
            'versions'           => $modContextProvider->getLogEntries($entity),
            'modContextProvider' => $modContextProvider
        );
    }

    /**
     * Displays the version history of a vulnerability.
     *
     * @Route("/{slug}/history/revert/{entityType}/{entitySlug}/{entityVersion}", requirements={"entityVersion" = "\d+"}, name="vulnerability_revert")
     * @Template()
     */
    public function revertVersionAction($slug, $entityType, $entitySlug, $entityVersion)
    {
        $em = $this->getDoctrine()->getManager();

        switch ($entityType)
        {
            case 'vulnerability':
                $vulnerability = $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlug($slug);
                break;

            default:
                throw $this->createNotFoundException('Unable to find Entity type');
        }

        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');
        $repo = $em->getRepository('Gedmo\Loggable\Entity\LogEntry');
        $repo->revert($entity, $entityVersion);

        $em->persist($entity);
        $em->flush();

        return $this->redirect($this->generateUrl('vulnerability_history', array('slug' => $vulnerability->getSlug())), 301);
    }

    /**
     * Displays a form to edit an existing Vulnerability entity.
     *
     * @Route("/{slug}/edit", name="vulnerability_edit")
     * @Template()
     */
    public function editAction($slug)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlug($slug);

        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

        $editForm = $this->createForm(new VulnerabilityType(), $entity);

        return array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'subtitle'    => $this->get('translator')->trans('form.general.subtitle.details', array('%type%' => 'Vulnerability'))
        );
    }

    /**
     * Edits an existing Vulnerability entity.
     *
     * @Route("/{slug}/update", name="vulnerability_update")
     * @Method("POST")
     * @Template("PwcSirBundle:Vulnerability:edit.html.twig")
     */
    public function updateAction(Request $request, $slug)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlug($slug);

        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

        // Create an array of the current Vulnerability Reference objects in the database
        $services = array();
        foreach ($entity->getServices() as $service) $services[] = $service;

        // Create an array of the current Vulnerability Reference objects in the database
        $vulnRefs = array();
        foreach ($entity->getVulnRefs() as $vulnRef) $vulnRefs[] = $vulnRef;

        // Create an array of the current Owasp Reference objects in the database
        $owaspRefs = array();
        foreach ($entity->getOwaspRefs() as $owaspRef) $owaspRefs[] = $owaspRef;

        $deleteForm = $this->createDeleteForm($entity->getSlug());
        $editForm = $this->createForm(new VulnerabilityType(), $entity);
        $editForm->bind($request);

        if ($editForm->isValid())
        {
            // filter $vulnRefs to contain tags no longer present
            foreach ($entity->getServices() as $service)
            {
                foreach ($services as $key => $toDel) if ($toDel->getId() === $service->getId()) unset($services[$key]);
            }

            // remove the relationship between the tag and the Task
            foreach ($services as $service)
            {
                // if it were a ManyToOne relationship, remove the relationship like this
                $service->setVulnerability(null);

                // if you wanted to delete the Tag entirely, you can also do that
                $em->remove($service);
            }

            // filter $vulnRefs to contain tags no longer present
            foreach ($entity->getVulnRefs() as $vulnRef)
            {
                foreach ($vulnRefs as $key => $toDel) if ($toDel->getId() === $vulnRef->getId()) unset($vulnRefs[$key]);
            }

            // remove the relationship between the tag and the Task
            foreach ($vulnRefs as $vulnRef)
            {
                // if it were a ManyToOne relationship, remove the relationship like this
                $vulnRef->setVulnerability(null);

                // if you wanted to delete the Tag entirely, you can also do that
                $em->remove($vulnRef);
            }

            // filter $owaspRefs to contain references no longer present
            foreach ($entity->getOwaspItems(true) as $owaspRef)
            {
                // if the key still exists, this indicates that the child is still set
                // so unset the child from the originalChildren array to avoid it from being removed
                foreach ($owaspRefs as $key => $toDel) if ($toDel->getOwaspItem()->getId() === $owaspRef->getId()) unset($owaspRefs[$key]);
            }

            // remove the relationship
            foreach ($owaspRefs as $owaspRef)
            {
                $entity->removeOwaspRef($owaspRef);

                // delete the child entirely
                $em->remove($owaspRef);
            }

            $em->persist($entity);
            $em->flush();

            return $this->redirect($this->generateUrl('vulnerability_edit', array('slug' => $entity->getSlug())));
        }

        $this->get('session')->getFlashBag()->add('warning', 'form.general.flash.save_unable');

        return array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
            'subtitle'    => $this->get('translator')->trans('form.general.subtitle.details', array('%type%' => 'Vulnerability'))
        );
    }

    /**
     * Deletes a Vulnerability entity.
     *
     * @Route("/{slug}/delete", name="vulnerability_delete")
     * @Method("POST")
     */
    public function deleteAction(Request $request, $slug)
    {
        $form = $this->createDeleteForm($slug);
        $form->bind($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlug($slug);

            if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

            $em->remove($entity);
            $em->flush();
        }

        return $this->redirect($this->generateUrl('vulnerability'));
    }

    private function createDeleteForm($slug)
    {
        return $this->createFormBuilder(array('slug' => $slug))
            ->add('slug', 'hidden')
            ->getForm()
        ;
    }
}
