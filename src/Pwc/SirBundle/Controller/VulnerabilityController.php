<?php

namespace Pwc\SirBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Pwc\SirBundle\Entity\Vulnerability;
use Pwc\SirBundle\Entity\VulnRef;

use Pwc\SirBundle\Form\VulnerabilityType;
use Pwc\SirBundle\Form\VulnRefCollectionType;

/**
 * Vulnerability controller.
 *
 * @Route("/vulnerability")
 */
class VulnerabilityController extends Controller
{
    /**
     * Lists all Vulnerability entities.
     *
     * @Route("/", name="vulnerability")
     * @Template()
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $entities = $em->getRepository('PwcSirBundle:Vulnerability')->findAll();

        return array(
            'entities' => $entities,
        );
    }

    /**
     * Finds and displays a Vulnerability entity.
     *
     * @Route("/{id}/show", name="vulnerability_show")
     * @Template()
     */
    public function showAction($id)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Vulnerability entity.');
        }

        $deleteForm = $this->createDeleteForm($id);

        return array(
            'entity'      => $entity,
            'delete_form' => $deleteForm->createView(),
        );
    }

    /**
     * Displays a form to create a new Vulnerability entity.
     *
     * @Route("/new", name="vulnerability_new")
     * @Template()
     */
    public function newAction()
    {
        $entity = new Vulnerability();
        $form   = $this->createForm(new VulnerabilityType(), $entity);

        return array(
            'entity' => $entity,
            'form'   => $form->createView(),
        );
    }

    /**
     * Creates a new Vulnerability entity.
     *
     * @Route("/create", name="vulnerability_create")
     * @Method("POST")
     * @Template("PwcSirBundle:Vulnerability:new.html.twig")
     */
    public function createAction(Request $request)
    {
        $entity  = new Vulnerability();
        $form = $this->createForm(new VulnerabilityType(), $entity);
        $form->bind($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($entity);
            $em->flush();

            return $this->redirect($this->generateUrl('vulnerability_show', array('id' => $entity->getId())));
        }

        return array(
            'entity' => $entity,
            'form'   => $form->createView(),
        );
    }


    /**
     * Displays a form to add new References to the Vulnerability entity.
     *
     * @Route("/references/{slug}", name="vulnerability_references")
     * @Template()
     */
    public function editReferencesAction($slug)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlug($slug);

        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

        $form = $this->createForm(new VulnRefCollectionType(), $entity);

        return array(
            'entity' => $entity,
            'form'   => $form->createView(),
        );
    }

    /**
     * Updates an existing Vulnerability entity with references.
     *
     * @Route("/references/{slug}/update", name="vulnerability_references_update")
     * @Method("POST")
     * @Template("PwcSirBundle:Vulnerability:editReferences.html.twig")
     */
    public function updateReferencesAction(Request $request, $slug)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->findOneBySlug($slug);

        if (!$entity) throw $this->createNotFoundException('Unable to find Vulnerability entity.');

        $originalChildren = array();

        // Create an array of the current Tag objects in the database
        foreach ($entity->getVulnRefs() as $child) {
            $originalChildren[] = $child;
        }

        $form = $this->createForm(new VulnRefCollectionType(), $entity);
        $form->bind($request);

        if ($form->isValid())
        {
            // filter $originalChildren to contain tags no longer present
            foreach ($entity->getVulnRefs() as $child) {
                foreach ($originalChildren as $key => $toDel) {
                    if ($toDel->getId() === $child->getId()) {
                        unset($originalChildren[$key]);
                    }
                }
            }

            // remove the relationship between the tag and the Task
            foreach ($originalChildren as $child) {

                // if it were a ManyToOne relationship, remove the relationship like this
                $child->setVulnerability(null);

                //$em->persist($child);

                // if you wanted to delete the Tag entirely, you can also do that
                $em->remove($child);
            }

            $em->persist($entity);
            $em->flush();

            return $this->redirect($this->generateUrl('vulnerability'));
        }

        return array(
            'entity' => $entity,
            'form'   => $form->createView()
        );
    }

    /**
     * Displays a form to edit an existing Vulnerability entity.
     *
     * @Route("/{id}/edit", name="vulnerability_edit")
     * @Template()
     */
    public function editAction($id)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Vulnerability entity.');
        }

        $editForm = $this->createForm(new VulnerabilityType(), $entity);
        $deleteForm = $this->createDeleteForm($id);

        return array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        );
    }

    /**
     * Edits an existing Vulnerability entity.
     *
     * @Route("/{id}/update", name="vulnerability_update")
     * @Method("POST")
     * @Template("PwcSirBundle:Vulnerability:edit.html.twig")
     */
    public function updateAction(Request $request, $id)
    {
        $em = $this->getDoctrine()->getManager();

        $entity = $em->getRepository('PwcSirBundle:Vulnerability')->find($id);

        if (!$entity) {
            throw $this->createNotFoundException('Unable to find Vulnerability entity.');
        }

        $deleteForm = $this->createDeleteForm($id);
        $editForm = $this->createForm(new VulnerabilityType(), $entity);
        $editForm->bind($request);

        if ($editForm->isValid()) {
            $em->persist($entity);
            $em->flush();

            return $this->redirect($this->generateUrl('vulnerability_edit', array('id' => $id)));
        }

        return array(
            'entity'      => $entity,
            'edit_form'   => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        );
    }

    /**
     * Deletes a Vulnerability entity.
     *
     * @Route("/{id}/delete", name="vulnerability_delete")
     * @Method("POST")
     */
    public function deleteAction(Request $request, $id)
    {
        $form = $this->createDeleteForm($id);
        $form->bind($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $entity = $em->getRepository('PwcSirBundle:Vulnerability')->find($id);

            if (!$entity) {
                throw $this->createNotFoundException('Unable to find Vulnerability entity.');
            }

            $em->remove($entity);
            $em->flush();
        }

        return $this->redirect($this->generateUrl('vulnerability'));
    }

    private function createDeleteForm($id)
    {
        return $this->createFormBuilder(array('id' => $id))
            ->add('id', 'hidden')
            ->getForm()
        ;
    }
}
