<?php

namespace Pwc\SirBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * @ORM\Entity
 * @ORM\Table(name="vulnerability")
 * @Gedmo\Loggable
 * @ORM\Entity(repositoryClass="Pwc\SirBundle\Repository\VulnerabilityRepository")
 */
class Vulnerability
{
    protected $entityType = 'Vulnerability';

    protected $languages = array();

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @Gedmo\Versioned
     * @ORM\Column(type="string", length=100)
     * @Assert\NotBlank()
     */
    protected $name;

    /**
     * @Gedmo\Versioned
     * @ORM\ManyToOne(targetEntity="Likelihood", inversedBy="vulnerabilities")
     * @ORM\JoinColumn(name="likelihood_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank()
     */
    protected $likelihood;

    /**
     * @Gedmo\Versioned
     * @ORM\ManyToOne(targetEntity="Impact", inversedBy="vulnerabilities")
     * @ORM\JoinColumn(name="impact_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank()
     */
    protected $impact;

    /**
     * @Gedmo\Versioned
     * @ORM\ManyToOne(targetEntity="Time", inversedBy="vulnerabilities")
     * @ORM\JoinColumn(name="time_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank()
     */
    protected $time;

    /**
     * @Gedmo\Versioned
     * @ORM\ManyToOne(targetEntity="Cost", inversedBy="vulnerabilities")
     * @ORM\JoinColumn(name="cost_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank()
     */
    protected $cost;

    /**
     * @ORM\OneToMany(targetEntity="ProductRef", mappedBy="vulnerability", cascade={"persist", "remove"})
     */
    protected $productRefs;

    /**
     * @Gedmo\Versioned
     * @ORM\ManyToOne(targetEntity="Tool", inversedBy="vulnerabilities")
     * @ORM\JoinColumn(name="tool_id", referencedColumnName="id")
     */
    protected $tool;

    /**
     * @ORM\OneToMany(targetEntity="VulnRef", mappedBy="vulnerability", cascade={"persist", "remove"})
     * @Assert\Valid()
     */
    protected $vulnRefs;

    /**
     * @ORM\OneToMany(targetEntity="OwaspRef", mappedBy="vulnerability", cascade={"persist", "remove"})
     */
    protected $owaspRefs;

    /**
     * @ORM\OneToMany(targetEntity="VulnDescription", mappedBy="vulnerability", cascade={"persist", "remove"})
     */
    protected $vulnDescriptions;

    /**
     * @ORM\OneToMany(targetEntity="Service", mappedBy="vulnerability", cascade={"persist", "remove"})
     * @Assert\Valid()
     */
    protected $services;

    /**
     * @Gedmo\Versioned
     * @ORM\ManyToOne(targetEntity="Layer", inversedBy="vulnerabilities")
     * @ORM\JoinColumn(name="layer_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank()
     */
    protected $layer;

    /**
     * @Gedmo\Versioned
     * @ORM\ManyToOne(targetEntity="RootCause", inversedBy="vulnerabilities")
     * @ORM\JoinColumn(name="rootcause_id", referencedColumnName="id", nullable=false)
     * @Assert\NotBlank()
     */
    protected $rootcause;

    /**
     * @Assert\Count(
     *      min = "1"
     * )
     */
    protected $products;

    protected $owaspitems;

    /**
     * @Gedmo\Slug(fields={"name"})
     * @ORM\Column(length=128)
     */
    protected $slug;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->vulnRefs = new \Doctrine\Common\Collections\ArrayCollection();
        $this->productRefs = new \Doctrine\Common\Collections\ArrayCollection();
    }

    public function __toString()
    {
        return $this->getName();
    }

    /**
     * Get entity type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->entityType;
    }

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return Vulnerability
     */
    public function setName($name)
    {
        $this->name = $name;
    
        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set likelihood
     *
     * @param string $likelihood
     * @return Vulnerability
     */
    public function setLikelihood($likelihood)
    {
        $this->likelihood = $likelihood;
    
        return $this;
    }

    /**
     * Get likelihood
     *
     * @return string 
     */
    public function getLikelihood()
    {
        return $this->likelihood;
    }

    /**
     * Set impact
     *
     * @param string $impact
     * @return Vulnerability
     */
    public function setImpact($impact)
    {
        $this->impact = $impact;
    
        return $this;
    }

    /**
     * Get impact
     *
     * @return string 
     */
    public function getImpact()
    {
        return $this->impact;
    }

    /**
     * Set time
     *
     * @param string $time
     * @return Vulnerability
     */
    public function setTime($time)
    {
        $this->time = $time;
    
        return $this;
    }

    /**
     * Get time
     *
     * @return string 
     */
    public function getTime()
    {
        return $this->time;
    }

    /**
     * Set cost
     *
     * @param string $cost
     * @return Vulnerability
     */
    public function setCost($cost)
    {
        $this->cost = $cost;
    
        return $this;
    }

    /**
     * Get cost
     *
     * @return string 
     */
    public function getCost()
    {
        return $this->cost;
    }

    /**
     * Add products
     *
     * @param \Pwc\SirBundle\Entity\Product $product
     * @return Vulnerability
     */
    public function addProduct(\Pwc\SirBundle\Entity\Product $product)
    {
        $this->addProductRef($product);
        $this->products[] = $product;

        return $this;
    }

    /**
     * Remove products
     *
     * @param \Pwc\SirBundle\Entity\Product $product
     */
    public function removeProduct(\Pwc\SirBundle\Entity\Product $product)
    {
        foreach($this->getProductRefs() as $productRef)
        {
            if($productRef->getProduct()->getId() == $product->getId())
            {
                $this->removeProductRef($productRef);
                break;
            }
        }

        $this->products->removeElement($product);
    }

    /**
     * Get products
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProducts()
    {
        $this->products = new \Doctrine\Common\Collections\ArrayCollection();
        if (count($this->getProductRefs()) > 0) foreach($this->getProductRefs() as $productRef) $this->products[] = $productRef->getProduct();

        return $this->products;
    }

    /**
     * Add product references
     *
     * @param \Pwc\SirBundle\Entity\Product $product
     * @return Vulnerability
     */
    public function addProductRef(\Pwc\SirBundle\Entity\Product $product)
    {
        $productRef = new \Pwc\SirBundle\Entity\ProductRef;
        $productRef->setProduct($product);
        $productRef->setVulnerability($this);

        $this->productRefs[] = $productRef;

        return $this;
    }

    /**
     * Remove product references
     *
     * @param \Pwc\SirBundle\Entity\ProductRef $productRef
     */
    public function removeProductRef(\Pwc\SirBundle\Entity\ProductRef $productRef)
    {
        $this->productRefs->removeElement($productRef);
    }


    /**
     * Get product references
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProductRefs()
    {
        return $this->productRefs;
    }

    /**
     * Set tool
     *
     * @param \Pwc\SirBundle\Entity\Tool $tool
     * @return Vulnerability
     */
    public function setTool(\Pwc\SirBundle\Entity\Tool $tool = null)
    {
        $this->tool = $tool;
    
        return $this;
    }

    /**
     * Get tool
     *
     * @return \Pwc\SirBundle\Entity\Tool 
     */
    public function getTool()
    {
        return $this->tool;
    }

    /**
     * Add vulnRef
     *
     * @param \Pwc\SirBundle\Entity\VulnRef $vulnRef
     * @return Vulnerability
     */
    public function addVulnRef($vulnRef)
    {
        if ($vulnRef === null) $vulnRef = new \Pwc\SirBundle\Entity\VulnRef();

        $vulnRef->setVulnerability($this);
        $this->vulnRefs[] = $vulnRef;

        return $this;
    }

    /**
     * Remove vulnRef
     *
     * @param \Pwc\SirBundle\Entity\VulnRef $vulnRef
     */
    public function removeVulnRef(\Pwc\SirBundle\Entity\VulnRef $vulnRef)
    {
        $this->vulnRefs->removeElement($vulnRef);
    }

    /**
     * Get vulnRefs
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getVulnRefs()
    {
        return $this->vulnRefs;
    }

    /**
     * Set layer
     *
     * @param \Pwc\SirBundle\Entity\Layer $layer
     * @return Vulnerability
     */
    public function setLayer(\Pwc\SirBundle\Entity\Layer $layer = null)
    {
        $this->layer = $layer;
    
        return $this;
    }

    /**
     * Get layer
     *
     * @return \Pwc\SirBundle\Entity\Layer 
     */
    public function getLayer()
    {
        return $this->layer;
    }

    /**
     * Set rootcause
     *
     * @param \Pwc\SirBundle\Entity\RootCause $rootcause
     * @return Vulnerability
     */
    public function setRootcause(\Pwc\SirBundle\Entity\RootCause $rootcause = null)
    {
        $this->rootcause = $rootcause;
    
        return $this;
    }

    /**
     * Get rootcause
     *
     * @return \Pwc\SirBundle\Entity\RootCause 
     */
    public function getRootcause()
    {
        return $this->rootcause;
    }

    /**
     * Add owaspitem
     *
     * @param \Pwc\SirBundle\Entity\OwaspItem $owaspitem
     * @return Vulnerability
     */
    public function addOwaspItem(\Pwc\SirBundle\Entity\OwaspItem $owaspitem)
    {
        $this->addOwaspRef($owaspitem);
        $this->owaspitems[] = $owaspitem;

        return $this;
    }

    /**
     * Remove owaspitem
     *
     * @param \Pwc\SirBundle\Entity\OwaspItem $owaspitem
     */
    public function removeOwaspItem(\Pwc\SirBundle\Entity\OwaspItem $owaspitem)
    {
        foreach($this->getOwaspRefs() as $owaspRef)
        {
            if($owaspRef->getOwaspitem()->getId() == $owaspitem->getId())
            {
                $this->removeOwaspRef($owaspRef);
                break;
            }
        }

        $this->owaspitems->removeElement($owaspitem);
    }

    /**
     * Get owaspitems
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getOwaspItems()
    {
        $this->owaspitems = new \Doctrine\Common\Collections\ArrayCollection();

        if (count($this->getOwaspRefs()) > 0) foreach ($this->getOwaspRefs() as $owaspRef) $this->owaspitems[] = $owaspRef->getOwaspItem();

        return $this->owaspitems;
    }

    /**
     * Add owasp reference
     *
     * @param \Pwc\SirBundle\Entity\OwaspItem $owaspItem
     * @return Vulnerability
     */
    public function addOwaspRef(\Pwc\SirBundle\Entity\OwaspItem $owaspitem)
    {
        $owaspRef = new \Pwc\SirBundle\Entity\OwaspRef;
        $owaspRef->setOwaspitem($owaspitem);
        $owaspRef->setVulnerability($this);

        $this->owaspRefs[] = $owaspRef;
    
        return $this;
    }

    /**
     * Remove owasp reference
     *
     * @param \Pwc\SirBundle\Entity\OwaspRef $owaspRef
     */
    public function removeOwaspRef(\Pwc\SirBundle\Entity\OwaspRef $owaspRef)
    {
        $this->owaspRefs->removeElement($owaspRef);
    }

    /**
     * Get owasp references
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getOwaspRefs()
    {
        return $this->owaspRefs;
    }

    /**
     * Add services
     *
     * @param \Pwc\SirBundle\Entity\Service $service
     * @return Vulnerability
     */
    public function addService($service)
    {
        if ($service === null) $service = new \Pwc\SirBundle\Entity\Service();

        $service->setVulnerability($this);
        $this->services[] = $service;
    
        return $this;
    }

    /**
     * Remove services
     *
     * @param \Pwc\SirBundle\Entity\Service $service
     */
    public function removeService(\Pwc\SirBundle\Entity\Service $service)
    {
        $this->services->removeElement($service);
    }

    /**
     * Get services
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getServices()
    {
        return $this->services;
    }

    /**
     * Add vulnDescriptions
     *
     * @param \Pwc\SirBundle\Entity\VulnDescription $vulnDescription
     * @return Vulnerability
     */
    public function addVulnDescription(\Pwc\SirBundle\Entity\VulnDescription $vulnDescription)
    {
        $this->vulnDescriptions[] = $vulnDescription;
    
        return $this;
    }

    /**
     * Remove vulnDescriptions
     *
     * @param \Pwc\SirBundle\Entity\VulnDescription $vulnDescription
     */
    public function removeVulnDescription(\Pwc\SirBundle\Entity\VulnDescription $vulnDescription)
    {
        $this->vulnDescriptions->removeElement($vulnDescription);
    }

    /**
     * Get vulnDescriptions
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getVulnDescriptions()
    {
        $result = array();

        if($languages = $this->languages)
        {
            foreach($this->vulnDescriptions as $description)
            {
                if(array_key_exists($description->getLanguage()->getSlug(), $languages)) unset($languages[$description->getLanguage()->getSlug()]);
                $result[$description->getLanguage()->getName()] = $description;
            }

            foreach($languages as $language)
            {
                $description = new \Pwc\SirBundle\Entity\VulnDescription();
                $language->setAvailable(true);
                $description->setLanguage($language);
                $result[$language->getName()] = $description;
            }

            ksort($result);
            return $result;
        }else
        {
            return $this->vulnDescriptions;
        }
    }

    /**
     * Set slug
     *
     * @param string $slug
     * @return Vulnerability
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
 * Get slug
 *
 * @return string
 */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set languages available for vulnerability description
     *
     * @param array $languages
     * @return Vulnerability
     */
    public function setLanguages(array $languages = array())
    {
        foreach($languages as $language)
        {
            if ($language instanceof \Pwc\SirBundle\Entity\Language) $this->languages[$language->getSlug()] = $language;
        }

        return $this;
    }

    /**
     * Get languages available for vulnerability description
     *
     * @return array
     */
    public function getLanguages()
    {
        return $this->languages;
    }
}